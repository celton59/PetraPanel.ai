import { VideoDetailDialog } from "./VideoDetailDialog";
import { ApiVideo, useVideos } from "@/hooks/useVideos";
import { Button } from "@/components/ui/button";
import { UserBadges } from "@/components/video/UserBadges";
import { ImagePreview } from "@/components/ui/image-preview";
import { ThumbnailPreview } from "@/components/ui/thumbnail-preview";
import {
  Eye,
  Trash2,
  Loader2,
  Plus,
  Filter,
  Layout,
  Grid,
  List,
  Image as ImageIcon,
  CheckSquare,
  Square,
} from "lucide-react";
import { NewVideoDialog } from "./NewVideoDialog";
import { useUser } from "@/hooks/use-user";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Checkbox } from "@/components/ui/checkbox";
import { Badge } from "@/components/ui/badge";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import { toast } from "sonner";
import { Dialog } from "@/components/ui/dialog";
import { useState, useEffect, useRef } from "react";
import { VideoFilters } from "./VideoFilters";
import type { DateRange } from "react-day-picker";
import { getStatusBadgeColor, getStatusLabel } from "@/lib/status-labels";
import { cn, formatDate } from "@/lib/utils";
import { User, VideoStatus } from "@db/schema";

// Estados visibles por rol
const VISIBLE_STATES = {
  optimizer: [
    "pending",
    "in_progress",
    "optimize_review",
    "title_corrections",
    "en_revision",
  ],
  youtuber: ["video_disponible", "asignado", "youtube_ready", "completed"],
  reviewer: [
    "optimize_review",
    "title_corrections",
    "upload_review",
    "completed",
    "en_revision",
  ],
  admin: [
    "pending",
    "in_progress",
    "optimize_review",
    "title_corrections",
    "upload_review",
    "media_corrections",
    "review",
    "youtube_ready",
    "completed",
    "en_revision",
  ],
} as const;

const DETAILS_PERMISSION: Record<User["role"], VideoStatus[]> = {
  admin: [],
  optimizer: ["available", "content_corrections"],
  reviewer: ["content_review", "media_review"],
  content_reviewer: ['content_review'],
  media_reviewer: ['media_review'],
  youtuber: ["upload_media", "media_corrections"],
};

export default function VideosPage() {
  const { user, isLoading: isUserLoading } = useUser();

  if (isUserLoading) {
    return (
      <div className="flex items-center justify-center bg-background w-full">
        <div className="text-center space-y-4">
          <Loader2 className="h-8 w-8 animate-spin text-primary mx-auto" />
          <p className="text-muted-foreground">Cargando...</p>
        </div>
      </div>
    );
  }

  const { videos, isLoading, deleteVideo, updateVideo, bulkDeleteVideos } = useVideos();
  const [updatingVideoId, setUpdatingVideoId] = useState<number | undefined>(
    undefined,
  );
  const [newVideoDialogOpen, setNewVideoDialogOpen] = useState(false);
  const [selectedVideo, setSelectedVideo] = useState<ApiVideo | undefined>(
    undefined,
  );
  const [viewMode, setViewMode] = useState<"table" | "grid" | "list">("table");
  const [selectedVideos, setSelectedVideos] = useState<number[]>([]);
  const [selectMode, setSelectMode] = useState(false);
  
  // Estados para selección por arrastre
  const [isDragging, setIsDragging] = useState(false);
  const [dragStartPosition, setDragStartPosition] = useState<{x: number, y: number} | null>(null);
  const [dragCurrentPosition, setDragCurrentPosition] = useState<{x: number, y: number} | null>(null);
  const dragSelectionRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const searchParams = new URLSearchParams(window.location.search);
    if (searchParams.get("new") === "true") {
      setNewVideoDialogOpen(true);
      window.history.replaceState({}, "", "/videos");
    }
  }, []);

  // Estados para filtros
  const [searchTerm, setSearchTerm] = useState("");
  const [showFilters, setShowFilters] = useState(false);
  const [status, setStatus] = useState("all");
  const [assignedTo, setAssignedTo] = useState("all");
  const [projectId, setProjectId] = useState("all");
  const [dateRange, setDateRange] = useState<DateRange | undefined>(undefined);

  if (!user) return null;

  function canSeeVideoDetails(video: ApiVideo): boolean {
    if (user?.role === "admin") return true;

    return DETAILS_PERMISSION[user!.role].includes(video.status);
  }

  async function handleVideoClick(video: ApiVideo) {
    setSelectedVideo(video);
  }

  function renderEmptyState() {
    return (
      <div className="flex flex-col items-center justify-center p-8 text-center bg-card rounded-lg border border-dashed">
        <div className="rounded-full bg-primary/10 p-3 mb-4">
          <ImageIcon className="w-6 h-6 text-primary" />
        </div>
        <h3 className="text-lg font-medium">No hay videos disponibles</h3>
        <p className="text-sm text-muted-foreground mt-1 mb-4 max-w-sm">
          {user?.role === "optimizer"
            ? "Los videos aparecerán aquí cuando haya contenido para optimizar"
            : "Comienza agregando tu primer video usando el botón superior"}
        </p>
        {user?.role === "admin" && (
          <Button onClick={() => setNewVideoDialogOpen(true)} className="gap-2">
            <Plus className="w-4 h-4" />
            Nuevo Video
          </Button>
        )}
      </div>
    );
  }

  if (isLoading) {
    return (
      <div className="flex h-screen items-center justify-center bg-background">
        <div className="text-center space-y-4">
          <Loader2 className="h-8 w-8 animate-spin text-primary mx-auto" />
          <p className="text-muted-foreground">Cargando videos...</p>
        </div>
      </div>
    );
  }

  // Toggle video selection
  const toggleSelectVideo = (videoId: number) => {
    setSelectedVideos(prev => {
      if (prev.includes(videoId)) {
        return prev.filter(id => id !== videoId);
      } else {
        return [...prev, videoId];
      }
    });
  };

  // Toggle selection mode
  const toggleSelectionMode = () => {
    if (selectMode) {
      // If turning off selection mode, clear selections
      setSelectedVideos([]);
    }
    setSelectMode(!selectMode);
  };

  // Toggle select all videos
  const toggleSelectAll = () => {
    if (selectedVideos.length === filteredVideos.length) {
      setSelectedVideos([]);
    } else {
      setSelectedVideos(filteredVideos.map(video => video.id));
    }
  };

  // Handle bulk delete
  const handleBulkDelete = async () => {
    if (selectedVideos.length === 0) return;
    
    const projectIdToUse = videos.find(v => selectedVideos.includes(v.id))?.projectId;
    if (!projectIdToUse) return;

    try {
      await bulkDeleteVideos({
        projectId: projectIdToUse,
        videoIds: selectedVideos
      });
      setSelectedVideos([]);
      setSelectMode(false);
    } catch (error) {
      console.error("Error deleting videos in bulk:", error);
    }
  };
  
  // Funciones para selección por arrastre
  const handleDragStart = (e: React.MouseEvent<HTMLDivElement>) => {
    if (!selectMode) return;
    
    // Solo permitir arrastre con botón izquierdo
    if (e.button !== 0) return;
    
    setIsDragging(true);
    setDragStartPosition({ x: e.clientX, y: e.clientY });
    setDragCurrentPosition({ x: e.clientX, y: e.clientY });
    
    // Prevenir comportamiento de arrastre del navegador
    e.preventDefault();
  };
  
  const handleDragMove = (e: React.MouseEvent<HTMLDivElement>) => {
    if (!isDragging || !selectMode) return;
    
    setDragCurrentPosition({ x: e.clientX, y: e.clientY });
    
    // Detectar elementos en el rectángulo de selección
    if (dragSelectionRef.current) {
      const selectionRect = dragSelectionRef.current.getBoundingClientRect();
      
      // Obtener todos los elementos de video en la vista actual
      const videoElements = document.querySelectorAll('.video-card');
      
      videoElements.forEach((element) => {
        const videoRect = element.getBoundingClientRect();
        const videoId = Number(element.getAttribute('data-video-id'));
        
        // Verificar si el elemento está dentro del rectángulo de selección
        if (
          videoId &&
          rectanglesIntersect(selectionRect, videoRect)
        ) {
          // Verificar si ya está seleccionado
          if (!selectedVideos.includes(videoId)) {
            setSelectedVideos(prev => [...prev, videoId]);
          }
        }
      });
    }
    
    e.preventDefault();
  };
  
  const handleDragEnd = () => {
    if (!isDragging || !selectMode) return;
    
    setIsDragging(false);
    setDragStartPosition(null);
    setDragCurrentPosition(null);
  };
  
  // Función para verificar si dos rectángulos se intersectan
  const rectanglesIntersect = (rect1: DOMRect, rect2: DOMRect) => {
    return !(
      rect1.right < rect2.left ||
      rect1.left > rect2.right ||
      rect1.bottom < rect2.top ||
      rect1.top > rect2.bottom
    );
  };
  
  // Calcular las coordenadas del rectángulo de selección
  const getSelectionRectStyle = () => {
    if (!dragStartPosition || !dragCurrentPosition) return {};
    
    const left = Math.min(dragStartPosition.x, dragCurrentPosition.x);
    const top = Math.min(dragStartPosition.y, dragCurrentPosition.y);
    const width = Math.abs(dragCurrentPosition.x - dragStartPosition.x);
    const height = Math.abs(dragCurrentPosition.y - dragStartPosition.y);
    
    return {
      left: `${left}px`,
      top: `${top}px`,
      width: `${width}px`,
      height: `${height}px`,
    };
  };
  
  const filteredVideos = videos.filter((video) => {
    if (searchTerm) {
      return (
        video.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        video.optimizedTitle?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        (video.seriesNumber && video.seriesNumber.toString().toLowerCase().includes(searchTerm.toLowerCase())) ||
        (video.description && video.description.toLowerCase().includes(searchTerm.toLowerCase())) ||
        (video.creatorName && video.creatorName.toLowerCase().includes(searchTerm.toLowerCase())) ||
        (video.optimizerName && video.optimizerName.toLowerCase().includes(searchTerm.toLowerCase()))
      );
    }

    // if (status !== "all") {
    //   return video.status === status;
    // }

    // if (assignedTo !== "all") {
    //   return video.assigned_to === assignedTo;
    // }

    // if (projectId !== "all") {
    //   return video.project_id === projectId;
    // }

    // if (dateRange) {
    //   return (
    //     video.created_at >= dateRange.startDate &&
    //     video.created_at <= dateRange.endDate
    //   );
    // }

    return true;
  });
  
  // Efecto para atajos de teclado
  useEffect(() => {
    if (!selectMode) return;
    
    const handleKeyDown = (e: KeyboardEvent) => {
      // Evitar que los atajos se activen cuando se está escribiendo en un input
      if (e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement) {
        return;
      }
      
      // Esc - Salir del modo selección
      if (e.key === 'Escape') {
        toggleSelectionMode();
        e.preventDefault();
      }
      
      // Ctrl/Cmd + A - Seleccionar todos
      if ((e.ctrlKey || e.metaKey) && e.key === 'a') {
        toggleSelectAll();
        e.preventDefault();
      }
      
      // Delete - Eliminar videos seleccionados (solo si hay alguno seleccionado)
      if (e.key === 'Delete' && selectedVideos.length > 0 && user?.role === 'admin') {
        // Aquí no hacemos la eliminación directamente, solo mostramos el diálogo de confirmación
        // Esto asegura que el usuario confirme antes de eliminar
        // Simulamos un clic en el botón de eliminar
        const deleteButton = document.querySelector('[data-delete-selected]');
        if (deleteButton) {
          (deleteButton as HTMLButtonElement).click();
        }
        e.preventDefault();
      }
    };
    
    window.addEventListener('keydown', handleKeyDown);
    
    return () => {
      window.removeEventListener('keydown', handleKeyDown);
    };
  }, [selectMode, selectedVideos, toggleSelectAll, user?.role, toggleSelectionMode]);

  function getTableView() {
    return (
      <div className="space-y-6">
        {/* Vista de tabla para escritorio */}
        <div className="hidden md:block rounded-lg border bg-card shadow-sm overflow-hidden relative">
          {/* Accent gradient para la tabla de videos */}
          <div className="h-1 w-full bg-gradient-to-r from-indigo-600 via-primary to-violet-500 absolute top-0 left-0"></div>
          <div className="overflow-x-auto pt-1">
            <Table>
              <TableHeader>
                <TableRow className="bg-muted/50 hover:bg-muted/50">
                  {user?.role === "admin" && selectMode && (
                    <TableHead className="w-[40px]">
                      <div className={cn(
                        "p-1.5 rounded-md transition-colors", 
                        selectedVideos.length === filteredVideos.length && filteredVideos.length > 0 ? "bg-primary/20" : "bg-card hover:bg-muted"
                      )}>
                        <Checkbox 
                          checked={selectedVideos.length === filteredVideos.length && filteredVideos.length > 0}
                          onCheckedChange={toggleSelectAll}
                          className="h-4 w-4 border-2 transition-all duration-200"
                          aria-label="Seleccionar todos"
                        />
                      </div>
                    </TableHead>
                  )}
                  <TableHead className="">Miniatura</TableHead>
                  <TableHead className="">Serie</TableHead>
                  <TableHead className="">Título</TableHead>
                  <TableHead className="">Estado</TableHead>
                  <TableHead className="">Colaboradores</TableHead>
                  <TableHead className="">Actualización</TableHead>
                  <TableHead className=" text-right">Acciones</TableHead>
                </TableRow>
              </TableHeader>
            <TableBody>
              {filteredVideos?.map((video) => (
                <TableRow key={video.id} className="group video-card" data-video-id={video.id}>
                  {/* Selection checkbox */}
                  {user?.role === "admin" && selectMode && (
                    <TableCell className="w-[40px]">
                      <div className={cn(
                        "p-1.5 rounded-md transition-colors", 
                        selectedVideos.includes(video.id) ? "bg-primary/20" : "bg-card hover:bg-muted"
                      )}>
                        <Checkbox 
                          checked={selectedVideos.includes(video.id)}
                          onCheckedChange={() => toggleSelectVideo(video.id)}
                          className="h-4 w-4 border-2 transition-all duration-200"
                          aria-label={`Seleccionar video ${video.title}`}
                        />
                      </div>
                    </TableCell>
                  )}
                  {/* Miniatura */}
                  <TableCell>
                    <div className="w-16 h-12 rounded overflow-hidden group-hover:ring-2 ring-primary/20 transition-all">
                      <ThumbnailPreview
                        src={video.thumbnailUrl}
                        alt={video.optimizedTitle ?? video.title}
                        aspectRatio="video"
                        enableZoom={true}
                        showPlaceholder={true}
                        className="h-full"
                        title={video.optimizedTitle ?? video.title}
                        showHoverActions={false}
                      />
                    </div>
                  </TableCell>
                  <TableCell className="font-medium">
                    {video.seriesNumber ?? "-"}
                  </TableCell>
                  <TableCell className="font-medium max-w-[300px] truncate">
                    {video.optimizedTitle ?? video.title}
                  </TableCell>
                  <TableCell>
                    <Badge
                      variant="secondary"
                      className={cn(getStatusBadgeColor(video.status))}
                    >
                      {getStatusLabel(user!.role, video)}
                    </Badge>
                  </TableCell>
                  <TableCell>
                    <UserBadges video={video} compact />
                  </TableCell>
                  <TableCell>
                    {video.updatedAt
                      ? new Date(video.updatedAt).toLocaleDateString()
                      : ""}
                  </TableCell>
                  <TableCell className="text-right">
                    <div className="flex justify-end gap-2">
                      {canSeeVideoDetails(video) && (
                        <Button
                          variant="ghost"
                          size="icon"
                          disabled={updatingVideoId === video.id}
                          onClick={() => handleVideoClick(video)}
                          className="transition-colors"
                        >
                          {updatingVideoId === video.id ? (
                            <Loader2 className="h-4 w-4 animate-spin" />
                          ) : (
                            <Eye className="h-4 w-4" />
                          )}
                        </Button>
                      )}
                      {user?.role === "admin" && (
                        <AlertDialog>
                          <AlertDialogTrigger asChild>
                            <Button
                              variant="ghost"
                              size="icon"
                              className="text-destructive transition-colors"
                            >
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </AlertDialogTrigger>
                          <AlertDialogContent>
                            <AlertDialogHeader>
                              <AlertDialogTitle>
                                ¿Estás seguro?
                              </AlertDialogTitle>
                              <AlertDialogDescription>
                                Esta acción no se puede deshacer. Se eliminará
                                permanentemente el video
                                <span className="font-medium">
                                  {" "}
                                  {video.title}
                                </span>
                                .
                              </AlertDialogDescription>
                            </AlertDialogHeader>
                            <AlertDialogFooter>
                              <AlertDialogCancel>Cancelar</AlertDialogCancel>
                              <AlertDialogAction
                                onClick={() =>
                                  deleteVideo({
                                    videoId: video.id,
                                    projectId: video.projectId,
                                  })
                                }
                                className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
                              >
                                Eliminar
                              </AlertDialogAction>
                            </AlertDialogFooter>
                          </AlertDialogContent>
                        </AlertDialog>
                      )}
                    </div>
                  </TableCell>
                </TableRow>
              ))}
              {(!videos || videos.length === 0) && (
                <TableRow>
                  <TableCell colSpan={12}>{renderEmptyState()}</TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </div>
        
        {/* Vista móvil optimizada: tarjetas con deslizamiento */}
        <div className="md:hidden space-y-4">
          {filteredVideos?.map((video) => (
            <div
              key={video.id}
              className="bg-card rounded-lg border shadow-sm overflow-hidden video-card"
              data-video-id={video.id}
              onClick={() => !selectMode && handleVideoClick(video)}
            >
            <div className="flex items-start relative">
              {/* Barra lateral de color según estado */}
              <div className={cn(
                "absolute left-0 top-0 bottom-0 w-1.5",
                video.status === "available" ? "bg-indigo-500" :
                video.status === "content_corrections" ? "bg-orange-500" :
                video.status === "content_review" ? "bg-sky-500" :
                video.status === "upload_media" ? "bg-amber-500" :
                video.status === "media_corrections" ? "bg-pink-500" :
                video.status === "media_review" ? "bg-violet-500" :
                video.status === "final_review" ? "bg-teal-500" :
                video.status === "completed" ? "bg-emerald-500" : "bg-gray-500"
              )} />
              
              {/* Información principal */}
              <div className="flex-1 p-3 pl-4">
                {/* Selection checkbox for mobile view */}
                {user?.role === "admin" && selectMode && (
                  <div className="absolute top-2 right-2 z-10 transition-all duration-200 scale-0 animate-in zoom-in-50 data-[state=visible]:scale-100"
                    data-state={selectMode ? "visible" : "hidden"}>
                    <div className={cn(
                      "p-1.5 rounded-md transition-colors", 
                      selectedVideos.includes(video.id) ? "bg-primary/30 backdrop-blur-sm" : "bg-background/80 backdrop-blur-sm hover:bg-background/90"
                    )}>
                      <Checkbox
                        checked={selectedVideos.includes(video.id)}
                        onCheckedChange={() => toggleSelectVideo(video.id)}
                        className="h-4 w-4 border-2 transition-all duration-200"
                        aria-label={`Seleccionar video ${video.title}`}
                      />
                    </div>
                  </div>
                )}
                {/* Encabezado con miniatura y estado */}
                <div className="flex justify-between items-start gap-3 mb-2">
                  <div className="flex-1">
                    <h3 className="font-medium text-sm line-clamp-2">
                      {video.optimizedTitle || video.title}
                    </h3>
                    <div className="flex items-center gap-2 mt-1">
                      <span className="text-xs px-1.5 py-0.5 rounded-full bg-primary/10 text-primary">
                        {video.seriesNumber || "Sin serie"}
                      </span>
                      <span className="text-xs text-muted-foreground">
                        {video.updatedAt ? new Date(video.updatedAt).toLocaleDateString() : (video.createdAt ? new Date(video.createdAt).toLocaleDateString() : '')}
                      </span>
                    </div>
                  </div>
                  <div className="h-14 w-20 flex-shrink-0 rounded overflow-hidden">
                    <ThumbnailPreview
                      src={video.thumbnailUrl}
                      alt={video.title}
                      aspectRatio="video"
                      enableZoom={true}
                      showPlaceholder={true}
                      title={video.optimizedTitle || video.title}
                      duration={video.seriesNumber ? `S${video.seriesNumber}` : undefined}
                      showHoverActions={false}
                      className="h-full"
                    />
                  </div>
                </div>
                
                {/* Pie con estado y colaboradores */}
                <div className="flex flex-wrap justify-between items-center mt-2">
                  <Badge
                    variant="secondary"
                    className={cn(
                      "text-xs capitalize mb-1",
                      getStatusBadgeColor(video.status)
                    )}
                  >
                    {getStatusLabel(user!.role, video)}
                  </Badge>
                  <div className="mt-1">
                    <UserBadges video={video} compact />
                  </div>
                </div>
              </div>
            </div>
            
            {/* Acciones con botones más grandes para móvil */}
            <div className="flex border-t px-3 py-2 bg-muted/20">
              <Button
                variant="ghost"
                size="sm"
                className="text-muted-foreground flex-1 h-8"
                onClick={(e) => {
                  e.stopPropagation();
                  handleVideoClick(video);
                }}
              >
                <Eye className="h-3.5 w-3.5 mr-1.5" />
                Ver
              </Button>
              {user?.role === "admin" && (
                <AlertDialog>
                  <AlertDialogTrigger asChild>
                    <Button
                      variant="ghost"
                      size="sm"
                      className="text-destructive flex-1 h-8"
                      onClick={(e) => e.stopPropagation()}
                    >
                      <Trash2 className="h-3.5 w-3.5 mr-1.5" />
                      Eliminar
                    </Button>
                  </AlertDialogTrigger>
                  <AlertDialogContent>
                    <AlertDialogHeader>
                      <AlertDialogTitle>¿Estás seguro?</AlertDialogTitle>
                      <AlertDialogDescription>
                        Esta acción no se puede deshacer. Se eliminará permanentemente el video{" "}
                        <span className="font-medium">{video.title}</span>.
                      </AlertDialogDescription>
                    </AlertDialogHeader>
                    <AlertDialogFooter>
                      <AlertDialogCancel>Cancelar</AlertDialogCancel>
                      <AlertDialogAction
                        onClick={() => deleteVideo({ videoId: video.id, projectId: video.projectId })}
                        className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
                      >
                        Eliminar
                      </AlertDialogAction>
                    </AlertDialogFooter>
                  </AlertDialogContent>
                </AlertDialog>
              )}
            </div>
          </div>
        ))}
        {(!videos || videos.length === 0) && renderEmptyState()}
      </div>
    );
  }

  function getGridView() {
    return (
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4">
        {filteredVideos?.map((video) => (
          <div
            key={video.id}
            className="group video-card relative rounded-lg border shadow-sm overflow-hidden transition-all hover:shadow-md bg-card"
            data-video-id={video.id}
            onClick={() => !selectMode && handleVideoClick(video)}
          >
            {/* Selection checkbox overlay */}
            {selectMode && (
              <div className="absolute top-2 right-2 z-10 transition-all duration-200 scale-0 animate-in zoom-in-50 data-[state=visible]:scale-100"
                data-state={selectMode ? "visible" : "hidden"}>
                <div className={cn(
                  "p-1.5 rounded-md transition-colors", 
                  selectedVideos.includes(video.id) ? "bg-primary/30 backdrop-blur-sm" : "bg-background/80 backdrop-blur-sm hover:bg-background/90"
                )}>
                  <Checkbox
                    checked={selectedVideos.includes(video.id)}
                    onCheckedChange={() => toggleSelectVideo(video.id)}
                    className="h-4 w-4 border-2 transition-all duration-200"
                    aria-label={`Seleccionar video ${video.title}`}
                  />
                </div>
              </div>
            )}
            
            {/* Thumbnail */}
            <div className="aspect-video w-full overflow-hidden relative">
              <ThumbnailPreview
                src={video.thumbnailUrl}
                alt={video.title}
                aspectRatio="video"
                enableZoom={true}
                showPlaceholder={true}
                title={video.optimizedTitle || video.title}
                duration={video.seriesNumber ? `S${video.seriesNumber}` : undefined}
                className="w-full h-full"
              />
              <div className="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none"></div>
            </div>
            
            {/* Content */}
            <div className="p-3">
              <h3 className="font-medium text-sm line-clamp-2 mb-1">
                {video.optimizedTitle || video.title}
              </h3>
              
              <div className="flex justify-between items-center mt-2">
                <Badge
                  variant="secondary"
                  className={cn(
                    "text-xs capitalize",
                    getStatusBadgeColor(video.status)
                  )}
                >
                  {getStatusLabel(user!.role, video)}
                </Badge>
                <div className="text-xs text-muted-foreground">
                  {video.updatedAt ? formatDate(video.updatedAt) : ""}
                </div>
              </div>
              
              <div className="flex items-center justify-between mt-2">
                <UserBadges video={video} compact />
                
                <div className="flex gap-1">
                  {canSeeVideoDetails(video) && (
                    <Button
                      variant="ghost"
                      size="icon"
                      className="h-8 w-8"
                      onClick={(e) => {
                        e.stopPropagation();
                        handleVideoClick(video);
                      }}
                    >
                      <Eye className="h-3.5 w-3.5" />
                    </Button>
                  )}
                  {user?.role === "admin" && (
                    <AlertDialog>
                      <AlertDialogTrigger asChild>
                        <Button
                          variant="ghost"
                          size="icon"
                          className="h-8 w-8 text-destructive"
                          onClick={(e) => e.stopPropagation()}
                        >
                          <Trash2 className="h-3.5 w-3.5" />
                        </Button>
                      </AlertDialogTrigger>
                      <AlertDialogContent>
                        <AlertDialogHeader>
                          <AlertDialogTitle>¿Estás seguro?</AlertDialogTitle>
                          <AlertDialogDescription>
                            Esta acción no se puede deshacer. Se eliminará permanentemente el video{" "}
                            <span className="font-medium">{video.title}</span>.
                          </AlertDialogDescription>
                        </AlertDialogHeader>
                        <AlertDialogFooter>
                          <AlertDialogCancel>Cancelar</AlertDialogCancel>
                          <AlertDialogAction
                            onClick={() => deleteVideo({ videoId: video.id, projectId: video.projectId })}
                            className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
                          >
                            Eliminar
                          </AlertDialogAction>
                        </AlertDialogFooter>
                      </AlertDialogContent>
                    </AlertDialog>
                  )}
                </div>
              </div>
            </div>
          </div>
        ))}
        {(!videos || videos.length === 0) && renderEmptyState()}
      </div>
    );
  }

  function getListView() {
    return (
      <div className="space-y-3">
        {filteredVideos?.map((video) => (
          <div
            key={video.id}
            className="flex gap-4 bg-card p-4 rounded-lg border shadow-sm video-card relative"
            data-video-id={video.id}
            onClick={() => !selectMode && handleVideoClick(video)}
          >
            {/* Selection checkbox */}
            {selectMode && (
              <div className="absolute top-2 right-2 z-10 transition-all duration-200 scale-0 animate-in zoom-in-50 data-[state=visible]:scale-100"
                data-state={selectMode ? "visible" : "hidden"}>
                <div className={cn(
                  "p-1.5 rounded-md transition-colors", 
                  selectedVideos.includes(video.id) ? "bg-primary/30 backdrop-blur-sm" : "bg-background/80 backdrop-blur-sm hover:bg-background/90"
                )}>
                  <Checkbox
                    checked={selectedVideos.includes(video.id)}
                    onCheckedChange={() => toggleSelectVideo(video.id)}
                    className="h-4 w-4 border-2 transition-all duration-200"
                    aria-label={`Seleccionar video ${video.title}`}
                  />
                </div>
              </div>
            )}
            
            {/* Thumbnail */}
            <div className="w-32 h-20 flex-shrink-0 rounded overflow-hidden">
              <ThumbnailPreview
                src={video.thumbnailUrl}
                alt={video.title}
                aspectRatio="video"
                enableZoom={true}
                showPlaceholder={true}
                title={video.optimizedTitle || video.title}
                duration={video.seriesNumber ? `S${video.seriesNumber}` : undefined}
                className="h-full w-full object-cover"
              />
            </div>
            
            {/* Content */}
            <div className="flex-1 min-w-0">
              <div className="flex justify-between">
                <h3 className="font-medium mb-1 truncate">
                  {video.optimizedTitle || video.title}
                </h3>
                <div className="flex-shrink-0 ml-2">
                  <Badge
                    variant="secondary"
                    className={cn("text-xs capitalize", getStatusBadgeColor(video.status))}
                  >
                    {getStatusLabel(user!.role, video)}
                  </Badge>
                </div>
              </div>
              
              <div className="text-sm text-muted-foreground mb-1 flex items-center gap-2">
                {video.seriesNumber && (
                  <span className="px-1.5 py-0.5 rounded text-xs bg-primary/10 text-primary">
                    Serie {video.seriesNumber}
                  </span>
                )}
                <span>{video.updatedAt ? formatDate(video.updatedAt) : ''}</span>
              </div>
              
              <div className="flex justify-between items-center mt-2">
                <UserBadges video={video} compact />
                
                <div className="flex gap-1">
                  {canSeeVideoDetails(video) && (
                    <Button
                      variant="ghost"
                      size="icon"
                      className="h-8 w-8"
                      onClick={(e) => {
                        e.stopPropagation();
                        handleVideoClick(video);
                      }}
                    >
                      <Eye className="h-3.5 w-3.5" />
                    </Button>
                  )}
                  {user?.role === "admin" && (
                    <AlertDialog>
                      <AlertDialogTrigger asChild>
                        <Button
                          variant="ghost"
                          size="icon"
                          className="h-8 w-8 text-destructive"
                          onClick={(e) => e.stopPropagation()}
                        >
                          <Trash2 className="h-3.5 w-3.5" />
                        </Button>
                      </AlertDialogTrigger>
                      <AlertDialogContent>
                        <AlertDialogHeader>
                          <AlertDialogTitle>¿Estás seguro?</AlertDialogTitle>
                          <AlertDialogDescription>
                            Esta acción no se puede deshacer. Se eliminará permanentemente el video{" "}
                            <span className="font-medium">{video.title}</span>.
                          </AlertDialogDescription>
                        </AlertDialogHeader>
                        <AlertDialogFooter>
                          <AlertDialogCancel>Cancelar</AlertDialogCancel>
                          <AlertDialogAction
                            onClick={() => deleteVideo({ videoId: video.id, projectId: video.projectId })}
                            className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
                          >
                            Eliminar
                          </AlertDialogAction>
                        </AlertDialogFooter>
                      </AlertDialogContent>
                    </AlertDialog>
                  )}
                </div>
              </div>
            </div>
          </div>
        ))}
        {(!videos || videos.length === 0) && renderEmptyState()}
      </div>
    );
  }

  function getVideoDialog() {
    return (
      <Dialog open={!!selectedVideo} onOpenChange={(open) => {
        if (!open) setSelectedVideo(undefined);
      }}>
        {selectedVideo && (
          <VideoDetailDialog
            video={selectedVideo}
            onUpdate={async (data, keepDialog) => {
              setUpdatingVideoId(selectedVideo.id);
              try {
                await updateVideo({
                  videoId: selectedVideo.id,
                  projectId: selectedVideo.projectId,
                  updateRequest: data,
                });
                if (!keepDialog) {
                  setSelectedVideo(undefined);
                }
                toast.success("Video actualizado correctamente");
              } catch (error) {
                console.error("Error actualizando video:", error);
                toast.error("Error al actualizar el video");
              } finally {
                setUpdatingVideoId(undefined);
              }
            }}
          />
        )}
      </Dialog>
    );
  }

  return (
    <div className="container mx-auto py-6 space-y-8">
      {/* Header section with title and actions */}
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Videos</h1>
          <p className="text-muted-foreground">
            Gestiona y organiza tu contenido audiovisual
          </p>
        </div>
        <div className="flex gap-2 self-end sm:self-auto">
          {user?.role === "admin" && (
            <Button
              variant={selectMode ? "secondary" : "outline"}
              onClick={toggleSelectionMode}
              className="gap-2"
            >
              {selectMode ? (
                <>
                  <CheckSquare className="w-4 h-4" />
                  Modo selección
                </>
              ) : (
                <>
                  <Square className="w-4 h-4" />
                  Seleccionar
                </>
              )}
            </Button>
          )}
          
          <div className="flex rounded-md overflow-hidden border">
            <Button
              variant={viewMode === "table" ? "default" : "outline"}
              size="icon"
              className={cn(
                "rounded-none border-0",
                viewMode === "table" ? "text-primary-foreground" : "text-muted-foreground hover:text-foreground"
              )}
              onClick={() => setViewMode("table")}
            >
              <Layout className="h-4 w-4" />
              <span className="sr-only">Vista de tabla</span>
            </Button>
            <Button
              variant={viewMode === "grid" ? "default" : "outline"}
              size="icon"
              className={cn(
                "rounded-none border-0 border-x border-border",
                viewMode === "grid" ? "text-primary-foreground" : "text-muted-foreground hover:text-foreground"
              )}
              onClick={() => setViewMode("grid")}
            >
              <Grid className="h-4 w-4" />
              <span className="sr-only">Vista de cuadrícula</span>
            </Button>
            <Button
              variant={viewMode === "list" ? "default" : "outline"}
              size="icon"
              className={cn(
                "rounded-none border-0",
                viewMode === "list" ? "text-primary-foreground" : "text-muted-foreground hover:text-foreground"
              )}
              onClick={() => setViewMode("list")}
            >
              <List className="h-4 w-4" />
              <span className="sr-only">Vista de lista</span>
            </Button>
          </div>
          
          <Button
            variant="outline"
            size="icon"
            onClick={() => setShowFilters(!showFilters)}
            className={cn(showFilters && "bg-muted")}
          >
            <Filter className="h-4 w-4" />
            <span className="sr-only">Filtros</span>
          </Button>
          
          {user?.role === "admin" && (
            <Button onClick={() => setNewVideoDialogOpen(true)} className="gap-2">
              <Plus className="w-4 h-4" />
              Nuevo Video
            </Button>
          )}
        </div>
      </div>

      {/* Bulk Delete Alert Dialog */}
      {user?.role === "admin" && (
        <AlertDialog>
          <AlertDialogTrigger asChild>
            <Button
              variant="destructive"
              className={cn(
                "gap-2 transition-opacity mt-4",
                selectedVideos.length > 0 && selectMode ? "opacity-100" : "opacity-0 pointer-events-none"
              )}
              data-delete-selected
            >
              <Trash2 className="w-4 h-4" />
              Eliminar ({selectedVideos.length})
            </Button>
          </AlertDialogTrigger>
          <AlertDialogContent>
            <AlertDialogHeader>
              <AlertDialogTitle>¿Estás seguro?</AlertDialogTitle>
              <AlertDialogDescription>
                Esta acción no se puede deshacer. Se eliminarán permanentemente los {selectedVideos.length} videos seleccionados.
              </AlertDialogDescription>
            </AlertDialogHeader>
            <AlertDialogFooter>
              <AlertDialogCancel>Cancelar</AlertDialogCancel>
              <AlertDialogAction
                onClick={handleBulkDelete}
                className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
              >
                Eliminar {selectedVideos.length} videos
              </AlertDialogAction>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialog>
      )}

      {/* Filters */}
      <VideoFilters
        searchTerm={searchTerm}
        onSearchChange={setSearchTerm}
        status={status}
        onStatusChange={setStatus}
        date={dateRange}
        onDateChange={setDateRange}
        assignedTo={assignedTo}
        onAssignedToChange={setAssignedTo}
        projectId={projectId}
        onProjectChange={setProjectId}
        showFilters={showFilters}
        onToggleFilters={() => setShowFilters(!showFilters)}
      />

      {/* Video content based on view mode */}
      <div 
        className="relative"
        onMouseDown={handleDragStart}
        onMouseMove={handleDragMove}
        onMouseUp={handleDragEnd}
        onMouseLeave={handleDragEnd}
      >
        {/* Selector de arrastre (solo visible cuando se está arrastrando) */}
        {isDragging && selectMode && (
          <div 
            ref={dragSelectionRef}
            className="absolute bg-primary/10 border border-primary/30 rounded-sm z-50 pointer-events-none"
            style={getSelectionRectStyle()}
          ></div>
        )}
        
        {viewMode === "table" && getTableView()}
        {viewMode === "grid" && getGridView()}
        {viewMode === "list" && getListView()}
      </div>

      {/* Modals and dialogs */}
      <NewVideoDialog
        open={newVideoDialogOpen}
        onOpenChange={setNewVideoDialogOpen}
      />

      {getVideoDialog()}
    </div>
  );
}