Vamos a revisar el componente ProjectSelector que se utiliza para la selecciÃ³n de proyectos:

src/components/users/project-selector/ProjectSelector.tsx
import { Command } from "cmdk";
import { Building2, Search, Check, Plus } from "lucide-react";
import { cn } from "@/lib/utils";
import { useProjects } from "./useProjects";
import { ProjectBadges } from "./ProjectBadges";
import { ProjectSelectorProps } from "./types";
import { Card } from "@/components/ui/card";
import { motion, AnimatePresence } from "framer-motion";

export function ProjectSelector({ selectedProjects = [], setSelectedProjects }: ProjectSelectorProps) {
  const { data: projects = [], isLoading } = useProjects();

  const toggleProject = (projectId: number) => {
    if (!setSelectedProjects) return;
    
    setSelectedProjects(
      selectedProjects?.includes(projectId)
        ? selectedProjects.filter((id) => id !== projectId)
        : [...(selectedProjects || []), projectId]
    );
  };

  if (isLoading) {
    return (
      <Card className="p-4">
        <div className="flex items-center justify-center gap-2 text-muted-foreground">
          <Building2 className="h-4 w-4 animate-pulse" />
          <span className="animate-pulse">Cargando proyectos...</span>
        </div>
      </Card>
    );
  }

  return (
    <div className="space-y-4">
      <Card className="overflow-hidden border shadow-sm transition-all duration-200 hover:shadow-md">
        <Command className="rounded-lg">
          <div className="flex items-center border-b px-3 py-2">
            <Search className="h-4 w-4 shrink-0 text-muted-foreground" />
            <Command.Input 
              placeholder="Buscar proyectos..." 
              className="flex h-10 w-full rounded-lg bg-transparent py-2 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50 border-0 focus:ring-0 pl-2"
            />
          </div>
          <Command.List className="max-h-[300px] overflow-y-auto p-2">
            {projects.length === 0 ? (
              <Command.Empty className="py-6 text-center text-sm">
                <div className="flex flex-col items-center gap-2 text-muted-foreground">
                  <Search className="h-8 w-8" />
                  <p>No se encontraron proyectos</p>
                </div>
              </Command.Empty>
            ) : (
              <Command.Group className="space-y-1">
                <AnimatePresence mode="wait">
                  {projects.map((project, index) => (
                    <motion.div
                      key={project.id}
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -10 }}
                      transition={{ duration: 0.15, delay: index * 0.05 }}
                      layout
                    >
                      <Command.Item
                        value={project.name}
                        onSelect={() => toggleProject(project.id)}
                        className="group flex items-center justify-between px-4 py-3 cursor-pointer rounded-md hover:bg-accent data-[selected]:bg-accent transition-colors"
                      >
                        <div className="flex items-center gap-3">
                          <div className={cn(
                            "p-2 rounded-md transition-colors",
                            selectedProjects?.includes(project.id)
                              ? "bg-primary/10 text-primary"
                              : "bg-muted text-muted-foreground group-hover:text-foreground"
                          )}>
                            <Building2 className="h-4 w-4" />
                          </div>
                          <div className="flex flex-col">
                            <span className="font-medium">{project.name}</span>
                            <span className="text-xs text-muted-foreground">Prefijo: {project.prefix}</span>
                          </div>
                        </div>
                        <div className="flex items-center gap-2">
                          {selectedProjects?.includes(project.id) ? (
                            <Check className="h-4 w-4 text-primary shrink-0" />
                          ) : (
                            <Plus className="h-4 w-4 text-muted-foreground group-hover:text-foreground shrink-0 opacity-0 group-hover:opacity-100 transition-opacity" />
                          )}
                        </div>
                      </Command.Item>
                    </motion.div>
                  ))}
                </AnimatePresence>
              </Command.Group>
            )}
          </Command.List>
        </Command>
      </Card>

      <ProjectBadges
        selectedProjects={selectedProjects || []}
        projects={projects}
        onToggleProject={toggleProject}
      />
    </div>
  );
}
src/components/users/project-selector/ProjectBadges.tsx
import { Badge } from "@/components/ui/badge";
import { Building2, X } from "lucide-react";
import { ProjectBadgesProps } from "./types";
import { motion, AnimatePresence } from "framer-motion";

export const ProjectBadges = ({ selectedProjects, projects, onToggleProject }: ProjectBadgesProps) => {
  if (!selectedProjects?.length) return null;

  return (
    <div className="flex flex-wrap gap-2">
      <AnimatePresence mode="popLayout">
        {selectedProjects.map((projectId, index) => {
          const project = projects.find(p => p.id === projectId);
          if (!project) return null;
          
          return (
            <motion.div
              key={project.id}
              initial={{ opacity: 0, scale: 0.8 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.8 }}
              transition={{ duration: 0.2, delay: index * 0.05 }}
              layout
            >
              <Badge
                variant="secondary"
                className="pl-2 pr-2 py-1.5 hover:bg-secondary/80 transition-colors cursor-pointer flex items-center gap-2 group"
                onClick={() => onToggleProject(project.id)}
              >
                <Building2 className="h-3 w-3 text-primary" />
                <span className="text-sm font-medium">{project.name}</span>
                <X className="h-3 w-3 text-muted-foreground group-hover:text-foreground transition-colors" />
              </Badge>
            </motion.div>
          );
        })}
      </AnimatePresence>
    </div>
  );
};
src/components/users/project-selector/types.ts
import { Project } from "@/types/project";

export interface ProjectData extends Project {}

export interface ProjectSelectorProps {
  selectedProjects?: number[];
  setSelectedProjects?: (projects: number[]) => void;
}

export interface ProjectBadgesProps {
  selectedProjects: number[];
  projects: ProjectData[];
  onToggleProject: (projectId: number) => void;
}
src/components/users/project-selector/useProjects.ts
import { useQuery } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";
import { queryConfigs } from "@/hooks/useQueryConfig";

export const useProjects = () => {
  return useQuery({
    queryKey: ['available-projects'],
    queryFn: async () => {
      try {
        const { data: { user } } = await supabase.auth.getUser();
        if (!user) return [];

        const { data: userProfile } = await supabase
          .from('profiles')
          .select('role')
          .eq('id', user.id)
          .maybeSingle();

        if (!userProfile) return [];

        // Si es admin, obtiene todos los proyectos
        if (userProfile.role === 'admin') {
          const { data: allProjects } = await supabase
            .from('projects')
            .select('*')
            .order('name');
          return allProjects || [];
        }

        // Si no es admin, obtener los proyectos asignados
        const { data: assignments } = await supabase
          .from('project_assignments')
          .select('project:projects(*)')
          .eq('user_id', user.id)
          .order('project.name');

        return assignments?.map(a => a.project).filter(Boolean) || [];
      } catch (error) {
        console.error('Error al obtener proyectos:', error);
        return [];
      }
    },
    ...queryConfigs.projects
  });
};