Necesitamos modificar/crear los siguientes archivos:

El componente principal de autenticación:
src/pages/Auth.tsx
import { AuthForm } from "@/components/auth/AuthForm";
import { Card, CardContent } from "@/components/ui/card";
import { CircleUserRound } from "lucide-react";

const Auth = () => {
  return (
    <div className="min-h-screen flex flex-col items-center justify-center p-4 md:p-8 bg-gradient-to-br from-primary/5 via-background to-primary/5">
      <div className="w-full max-w-md space-y-8">
        {/* Header Section */}
        <div className="flex flex-col items-center space-y-6 text-center">
          <div className="relative">
            <div className="absolute inset-0 bg-primary/10 blur-xl rounded-full"></div>
            <div className="relative bg-primary/10 p-4 rounded-full">
              <CircleUserRound className="w-12 h-12 text-primary animate-float" />
            </div>
          </div>
          <div className="space-y-2">
            <h1 className="text-2xl md:text-3xl font-bold tracking-tight">
              ¡Bienvenido de nuevo!
            </h1>
            <p className="text-sm md:text-base text-muted-foreground max-w-sm mx-auto">
              Inicia sesión para acceder a tu cuenta y gestionar tus videos
            </p>
          </div>
        </div>

        {/* Auth Form Card */}
        <Card className="border-border/50 backdrop-blur-sm bg-card/95">
          <CardContent className="pt-6">
            <AuthForm />
          </CardContent>
        </Card>

        {/* Footer Text */}
        <p className="px-4 md:px-8 text-center text-xs md:text-sm text-muted-foreground">
          Al continuar, aceptas nuestros{" "}
          <a 
            href="#" 
            className="underline underline-offset-4 hover:text-primary transition-colors"
          >
            Términos de servicio
          </a>{" "}
          y{" "}
          <a 
            href="#" 
            className="underline underline-offset-4 hover:text-primary transition-colors"
          >
            Política de privacidad
          </a>
        </p>
      </div>
    </div>
  );
};

export default Auth;
El formulario de autenticación:
src/components/auth/AuthForm.tsx
import { Auth } from '@supabase/auth-ui-react'
import { ThemeSupa } from '@supabase/auth-ui-shared'
import { supabase } from '@/integrations/supabase/client'
import { useTheme } from 'next-themes'
import { useToast } from '@/components/ui/use-toast'
import { useEffect } from 'react'
import { useNavigate } from 'react-router-dom'
import { useAuthStyles } from './styles/useAuthStyles'
import { useAuthLocalization } from './localization/useAuthLocalization'
import { handleAuthStateChange } from './handlers/authStateHandler'

// Función auxiliar para obtener la URL de redirección
const getRedirectUrl = () => {
  // En desarrollo, usa localhost
  if (import.meta.env.DEV) {
    return 'http://localhost:5173/auth'
  }
  // En producción, usa la URL de producción
  return 'https://petrapanel.ai/autenticacion'
}

export const AuthForm = () => {
  const { theme } = useTheme()
  const { toast } = useToast()
  const navigate = useNavigate()
  const { appearance } = useAuthStyles()
  const { localization } = useAuthLocalization()

  // Manejar el cambio de estado de autenticación
  useEffect(() => {
    const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event, session) => {
      console.log('Auth state changed:', event, session)
      await handleAuthStateChange(event, session, navigate, toast)
    })

    return () => subscription.unsubscribe()
  }, [navigate, toast])

  return (
    <Auth
      supabaseClient={supabase}
      appearance={appearance}
      providers={['google']}
      redirectTo={getRedirectUrl()}
      view="sign_in"
      showLinks={true}
      onlyThirdPartyProviders={false}
      localization={localization}
    />
  )
}
El manejador de eventos de autenticación:
src/components/auth/handlers/authStateHandler.ts
import { Session } from '@supabase/supabase-js'
import { supabase } from '@/integrations/supabase/client'
import { NavigateFunction } from 'react-router-dom'

export const handleAuthStateChange = async (
  event: string, 
  session: Session | null,
  navigate: NavigateFunction,
  toast: any
) => {
  if (event === 'SIGNED_IN') {
    // Verificar si el perfil existe
    const { data: profile, error: profileError } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', session?.user?.id)
      .single()

    if (profileError) {
      console.error('Error al obtener el perfil:', profileError)
      toast({
        title: "Error",
        description: "Hubo un problema al acceder a tu perfil.",
        variant: "destructive"
      })
      return
    }

    // Solo navegamos a la página principal, sin mostrar toast de éxito
    navigate('/')
  } else if (event === 'SIGNED_OUT') {
    toast({
      title: "Sesión cerrada",
      description: "Has cerrado sesión correctamente.",
    })
  } else if (event === 'PASSWORD_RECOVERY') {
    toast({
      title: "Recuperación de contraseña",
      description: "Revisa tu correo electrónico para continuar.",
    })
  }
}
Los estilos personalizados para el formulario:
src/components/auth/styles/useAuthStyles.ts
import { useTheme } from 'next-themes'
import { ThemeSupa } from '@supabase/auth-ui-shared'

export const useAuthStyles = () => {
  const { theme } = useTheme()
  
  const appearance = { 
    theme: ThemeSupa,
    variables: {
      default: {
        colors: {
          brand: 'hsl(var(--primary))',
          brandAccent: 'hsl(var(--primary))',
          brandButtonText: 'hsl(var(--primary-foreground))',
          defaultButtonBackground: 'hsl(var(--secondary))',
          defaultButtonBackgroundHover: 'hsl(var(--secondary))',
          defaultButtonBorder: 'hsl(var(--border))',
          defaultButtonText: 'hsl(var(--foreground))',
          dividerBackground: 'hsl(var(--border))',
          inputBackground: 'transparent',
          inputBorder: 'hsl(var(--border))',
          inputBorderHover: 'hsl(var(--border))',
          inputBorderFocus: 'hsl(var(--ring))',
          inputText: 'hsl(var(--foreground))',
          inputPlaceholder: 'hsl(var(--muted-foreground))',
        },
        space: {
          spaceSmall: '4px',
          spaceMedium: '8px',
          spaceLarge: '12px',
          labelBottomMargin: '8px',
          anchorBottomMargin: '4px',
          emailInputSpacing: '4px',
          socialAuthSpacing: '4px',
          buttonPadding: '8px',
          inputPadding: '8px',
        },
        fonts: {
          bodyFontFamily: `var(--font-sans)`,
          buttonFontFamily: `var(--font-sans)`,
          inputFontFamily: `var(--font-sans)`,
          labelFontFamily: `var(--font-sans)`,
        },
        fontSizes: {
          baseBodySize: '14px',
          baseInputSize: '14px',
          baseLabelSize: '14px',
          baseButtonSize: '14px',
        },
        borderWidths: {
          buttonBorderWidth: '1px',
          inputBorderWidth: '1px',
        },
        radii: {
          borderRadiusButton: '6px',
          buttonBorderRadius: '6px',
          inputBorderRadius: '6px',
        },
      },
    },
    style: {
      button: {
        border: '1px solid hsl(var(--border))',
        borderRadius: '6px',
        padding: '10px',
        height: '44px',
        fontSize: '14px',
        fontWeight: '500',
        width: '100%',
        transition: 'all 0.2s ease',
      },
      anchor: {
        color: 'hsl(var(--primary))',
        fontSize: '14px',
        textDecoration: 'none',
        fontWeight: '500',
        transition: 'color 0.2s ease',
      },
      container: {
        color: 'hsl(var(--foreground))',
      },
      label: {
        color: 'hsl(var(--foreground))',
        fontSize: '14px',
        marginBottom: '6px',
        fontWeight: '500',
      },
      input: {
        backgroundColor: 'transparent',
        border: '1px solid hsl(var(--border))',
        borderRadius: '6px',
        padding: '10px',
        height: '44px',
        fontSize: '14px',
        width: '100%',
        transition: 'all 0.2s ease',
      },
      message: {
        color: 'hsl(var(--muted-foreground))',
        fontSize: '14px',
        margin: '4px 0',
      },
      divider: {
        background: 'hsl(var(--border))',
        margin: '16px 0',
      },
    }
  }

  return { appearance }
}
La localización en español:
src/components/auth/localization/useAuthLocalization.ts
export const useAuthLocalization = () => {
  const localization = {
    variables: {
      sign_in: {
        email_label: 'Correo electrónico',
        password_label: 'Contraseña',
        button_label: 'Iniciar sesión',
        loading_button_label: 'Iniciando sesión...',
        social_provider_text: 'Continuar con {{provider}}',
        email_input_placeholder: 'Tu correo electrónico',
        password_input_placeholder: 'Tu contraseña'
      },
      sign_up: {
        email_label: 'Correo electrónico',
        password_label: 'Contraseña',
        button_label: 'Registrarse',
        loading_button_label: 'Registrando...',
        social_provider_text: 'Registrarse con {{provider}}',
        email_input_placeholder: 'Tu correo electrónico',
        password_input_placeholder: 'Tu contraseña',
        confirmation_text: 'Ya tienes una cuenta?',
        link_text: 'Inicia sesión'
      },
      forgotten_password: {
        link_text: '¿Olvidaste tu contraseña?',
        button_label: 'Enviar instrucciones',
        loading_button_label: 'Enviando instrucciones...',
        email_label: 'Correo electrónico',
        password_label: 'Contraseña',
        email_input_placeholder: 'Tu correo electrónico'
      }
    }
  }

  return { localization }
}