Necesitamos actualizar los siguientes archivos:

src/components/settings/users/UserSettingsDialog.tsx
import { Profile } from "@/types/user";
import { Card } from "@/components/ui/card";
import { UserSettingsForm } from "./UserSettingsForm";

interface UserSettingsDialogProps {
  user: Profile | null;
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export const UserSettingsDialog = ({ user, open, onOpenChange }: UserSettingsDialogProps) => {
  if (!open) return null;

  return (
    <div className="fixed inset-0 bg-background/80 backdrop-blur-sm z-50 flex items-center justify-center p-4">
      <Card className="w-full max-w-2xl max-h-[90vh] overflow-y-auto">
        <div className="p-6">
          <div className="mb-6">
            <h2 className="text-2xl font-semibold">
              {user ? 'Editar Usuario' : 'Nuevo Usuario'}
            </h2>
            <p className="text-sm text-muted-foreground mt-1">
              {user 
                ? 'Modifica la información del usuario y sus permisos' 
                : 'Completa la información para crear un nuevo usuario'
              }
            </p>
          </div>
          <UserSettingsForm 
            user={user} 
            onClose={() => onOpenChange(false)} 
          />
        </div>
      </Card>
    </div>
  );
};
src/components/settings/users/info/PersonalInfoSection.tsx
import { Card } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Info, Mail, Phone, User, UserRound } from "lucide-react";
import { Separator } from "@/components/ui/separator";

interface PersonalInfoSectionProps {
  formData: {
    full_name: string;
    username: string;
    email: string;
    phone: string;
    bio: string;
  };
  setFormData: (data: any) => void;
  isCheckingUsername: boolean;
  isCheckingEmail: boolean;
}

export const PersonalInfoSection = ({
  formData,
  setFormData,
  isCheckingUsername,
  isCheckingEmail
}: PersonalInfoSectionProps) => {
  return (
    <Card className="p-6 space-y-6">
      <div className="space-y-2">
        <div className="flex items-center space-x-2">
          <UserRound className="h-5 w-5 text-muted-foreground" />
          <h3 className="text-lg font-medium">Información Personal</h3>
        </div>
        <Separator />
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="space-y-2">
          <Label htmlFor="full_name" className="flex items-center space-x-2">
            <User className="h-4 w-4" />
            <span>Nombre completo</span>
          </Label>
          <Input
            id="full_name"
            value={formData.full_name}
            onChange={(e) => setFormData({ ...formData, full_name: e.target.value })}
            placeholder="Nombre completo"
            className="transition-all duration-200 focus:ring-2"
            required
          />
        </div>
        <div className="space-y-2">
          <Label htmlFor="username" className="flex items-center space-x-2">
            <UserRound className="h-4 w-4" />
            <span>Nombre de usuario</span>
          </Label>
          <div className="relative">
            <Input
              id="username"
              value={formData.username}
              onChange={(e) => setFormData({ ...formData, username: e.target.value })}
              placeholder="@usuario"
              className={`transition-all duration-200 focus:ring-2 ${
                isCheckingUsername ? 'pr-8' : ''
              }`}
            />
            {isCheckingUsername && (
              <div className="absolute right-2 top-1/2 -translate-y-1/2">
                <div className="animate-spin rounded-full h-4 w-4 border-2 border-primary border-t-transparent" />
              </div>
            )}
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="space-y-2">
          <Label htmlFor="email" className="flex items-center space-x-2">
            <Mail className="h-4 w-4" />
            <span>Email</span>
          </Label>
          <div className="relative">
            <Input
              id="email"
              type="email"
              value={formData.email}
              onChange={(e) => setFormData({ ...formData, email: e.target.value })}
              placeholder="email@ejemplo.com"
              className={`transition-all duration-200 focus:ring-2 ${
                isCheckingEmail ? 'pr-8' : ''
              }`}
              required
            />
            {isCheckingEmail && (
              <div className="absolute right-2 top-1/2 -translate-y-1/2">
                <div className="animate-spin rounded-full h-4 w-4 border-2 border-primary border-t-transparent" />
              </div>
            )}
          </div>
        </div>
        <div className="space-y-2">
          <Label htmlFor="phone" className="flex items-center space-x-2">
            <Phone className="h-4 w-4" />
            <span>Teléfono</span>
          </Label>
          <Input
            id="phone"
            value={formData.phone}
            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}
            placeholder="+34 600 000 000"
            className="transition-all duration-200 focus:ring-2"
          />
        </div>
      </div>

      <div className="space-y-2">
        <Label htmlFor="bio" className="flex items-center space-x-2">
          <Info className="h-4 w-4" />
          <span>Biografía</span>
        </Label>
        <Textarea
          id="bio"
          value={formData.bio}
          onChange={(e) => setFormData({ ...formData, bio: e.target.value })}
          placeholder="Escribe una breve biografía..."
          className="min-h-[100px] transition-all duration-200 focus:ring-2"
        />
      </div>
    </Card>
  );
};
src/components/settings/users/security/SecuritySection.tsx
import { Card } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Lock, Shield } from "lucide-react";
import { Separator } from "@/components/ui/separator";
import { RoleSelector } from "../RoleSelector";
import { ProjectSelector } from "@/components/users/project-selector/ProjectSelector";
import { Profile } from "@/types/profile";

interface SecuritySectionProps {
  formData: {
    role: string;
    password: string;
  };
  setFormData: (data: any) => void;
  isEditing: boolean;
  currentUser: Profile | null;
  onChangePassword?: () => void;
  selectedProjects: number[];
  setSelectedProjects: (projects: number[]) => void;
}

export const SecuritySection = ({
  formData,
  setFormData,
  isEditing,
  currentUser,
  onChangePassword,
  selectedProjects,
  setSelectedProjects
}: SecuritySectionProps) => {
  return (
    <Card className="p-6 space-y-6">
      <div className="space-y-2">
        <div className="flex items-center space-x-2">
          <Shield className="h-5 w-5 text-muted-foreground" />
          <h3 className="text-lg font-medium">Seguridad y Acceso</h3>
        </div>
        <Separator />
      </div>

      {!isEditing ? (
        <div className="space-y-2">
          <Label htmlFor="password" className="flex items-center space-x-2">
            <Lock className="h-4 w-4" />
            <span>Contraseña</span>
          </Label>
          <Input
            id="password"
            type="password"
            value={formData.password}
            onChange={(e) => setFormData({ ...formData, password: e.target.value })}
            placeholder="Contraseña segura"
            className="transition-all duration-200 focus:ring-2"
            required
            minLength={6}
          />
          <p className="text-xs text-muted-foreground mt-1">
            La contraseña debe tener al menos 6 caracteres
          </p>
        </div>
      ) : (
        <div className="space-y-2">
          <div className="flex items-center justify-between">
            <div>
              <h4 className="text-base font-medium">Contraseña</h4>
              <p className="text-sm text-muted-foreground">
                Cambia la contraseña del usuario para mantener la cuenta segura
              </p>
            </div>
            <Button
              type="button"
              variant="outline"
              onClick={onChangePassword}
              className="flex items-center gap-2"
            >
              <Lock className="h-4 w-4" />
              Cambiar contraseña
            </Button>
          </div>
        </div>
      )}

      <div className="space-y-3">
        <Label className="flex items-center space-x-2">
          <Shield className="h-4 w-4" />
          <span>Rol del usuario</span>
        </Label>
        <RoleSelector 
          value={formData.role}
          onChange={(value) => setFormData({ ...formData, role: value })}
        />
      </div>

      <div className="space-y-3">
        <Label className="flex items-center space-x-2">
          <Shield className="h-4 w-4" />
          <span>Acceso a proyectos</span>
        </Label>
        <ProjectSelector
          selectedProjects={selectedProjects}
          setSelectedProjects={setSelectedProjects}
        />
      </div>
    </Card>
  );
};
src/components/settings/users/UserFormActions.tsx
import { Button } from "@/components/ui/button";
import { Loader2, Trash2 } from "lucide-react";

interface UserFormActionsProps {
  isLoading: boolean;
  onClose: () => void;
  isEditing: boolean;
  onDelete?: () => void;
}

export const UserFormActions = ({ isLoading, onClose, isEditing, onDelete }: UserFormActionsProps) => {
  return (
    <div className="flex flex-col-reverse sm:flex-row gap-3 sm:items-center">
      {isEditing && onDelete && (
        <Button
          type="button"
          variant="destructive"
          onClick={onDelete}
          disabled={isLoading}
          className="w-full sm:w-auto"
        >
          <Trash2 className="h-4 w-4 mr-2" />
          Eliminar usuario
        </Button>
      )}
      <div className="flex flex-col-reverse sm:flex-row gap-3 w-full sm:w-auto sm:ml-auto">
        <Button
          type="button"
          variant="outline"
          onClick={onClose}
          disabled={isLoading}
          className="w-full sm:w-auto"
        >
          Cancelar
        </Button>
        <Button
          type="submit"
          disabled={isLoading}
          className="w-full sm:w-auto min-w-[120px]"
        >
          {isLoading ? (
            <div className="flex items-center justify-center space-x-2">
              <Loader2 className="h-4 w-4 animate-spin" />
              <span>Guardando...</span>
            </div>
          ) : isEditing ? (
            'Guardar cambios'
          ) : (
            'Crear usuario'
          )}
        </Button>
      </div>
    </div>
  );
};