// src/components/auth/AuthForm.tsx
import { Auth } from '@supabase/auth-ui-react'
import { ThemeSupa } from '@supabase/auth-ui-shared'
import { supabase } from '@/integrations/supabase/client'
import { useTheme } from 'next-themes'
import { useToast } from '@/components/ui/use-toast'
import { useEffect } from 'react'
import { useNavigate } from 'react-router-dom'
import { useAuthStyles } from './styles/useAuthStyles'
import { useAuthLocalization } from './localization/useAuthLocalization'
import { handleAuthStateChange } from './handlers/authStateHandler'

// Función auxiliar para obtener la URL de redirección
const getRedirectUrl = () => {
  // En desarrollo, usa localhost
  if (import.meta.env.DEV) {
    return 'http://localhost:5173/auth'
  }
  // En producción, usa la URL de producción
  return 'https://petrapanel.ai/autenticacion'
}

export const AuthForm = () => {
  const { theme } = useTheme()
  const { toast } = useToast()
  const navigate = useNavigate()
  const { appearance } = useAuthStyles()
  const { localization } = useAuthLocalization()

  // Manejar el cambio de estado de autenticación
  useEffect(() => {
    const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event, session) => {
      console.log('Auth state changed:', event, session)
      await handleAuthStateChange(event, session, navigate, toast)
    })

    return () => subscription.unsubscribe()
  }, [navigate, toast])

  return (
    <Auth
      supabaseClient={supabase}
      appearance={appearance}
      providers={['google']}
      redirectTo={getRedirectUrl()}
      view="sign_in"
      showLinks={true}
      onlyThirdPartyProviders={false}
      localization={localization}
    />
  )
}

// src/components/auth/handlers/authStateHandler.ts
import { Session } from '@supabase/supabase-js'
import { supabase } from '@/integrations/supabase/client'
import { NavigateFunction } from 'react-router-dom'

export const handleAuthStateChange = async (
  event: string, 
  session: Session | null,
  navigate: NavigateFunction,
  toast: any
) => {
  if (event === 'SIGNED_IN') {
    // Verificar si el perfil existe
    const { data: profile, error: profileError } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', session?.user?.id)
      .single()

    if (profileError) {
      console.error('Error al obtener el perfil:', profileError)
      toast({
        title: "Error",
        description: "Hubo un problema al acceder a tu perfil.",
        variant: "destructive"
      })
      return
    }

    // Solo navegamos a la página principal, sin mostrar toast de éxito
    navigate('/')
  } else if (event === 'SIGNED_OUT') {
    toast({
      title: "Sesión cerrada",
      description: "Has cerrado sesión correctamente.",
    })
  } else if (event === 'PASSWORD_RECOVERY') {
    toast({
      title: "Recuperación de contraseña",
      description: "Revisa tu correo electrónico para continuar.",
    })
  }
}

// src/components/UserMenu.tsx
import { DropdownMenu, DropdownMenuContent, DropdownMenuGroup, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"
import { Button } from "@/components/ui/button"
import { LogOut, User } from "lucide-react"
import { ThemeToggle } from "./ThemeToggle"
import { useNavigate } from "react-router-dom"
import { Separator } from "./ui/separator"
import { AvatarUpload } from "./profile/AvatarUpload"
import { useProfile } from "@/hooks/useProfile"
import { supabase } from "@/integrations/supabase/client"

interface UserMenuProps {
  className?: string;
}

export function UserMenu({ className }: UserMenuProps) {
  const navigate = useNavigate()
  const { data: profile, isLoading } = useProfile()

  if (isLoading) {
    return (
      <div className={`flex items-center px-4 h-14 ${className}`}>
        <div className="flex items-center space-x-4 ml-auto">
          <ThemeToggle />
          <Separator orientation="vertical" className="h-6" />
          <div className="h-8 w-8 rounded-full bg-muted animate-pulse" />
        </div>
      </div>
    )
  }

  return (
    <div className={`flex items-center px-4 h-14 ${className}`}>
      <div className="flex items-center space-x-4 ml-auto">
        <ThemeToggle />
        <Separator orientation="vertical" className="h-6" />
        
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" className="relative h-8 w-8 rounded-full">
              <AvatarUpload 
                url={profile?.avatar_url} 
                size="sm" 
                editable={false} 
              />
            </Button>
          </DropdownMenuTrigger>
          
          <DropdownMenuContent 
            className="w-56" 
            align="end" 
            forceMount
            sideOffset={8}
          >
            <DropdownMenuLabel className="font-normal">
              <div className="flex flex-col space-y-1">
                <p className="text-sm font-medium leading-none">{profile?.full_name || 'Usuario'}</p>
                <p className="text-xs leading-none text-muted-foreground">
                  {profile?.email || 'usuario@example.com'}
                </p>
              </div>
            </DropdownMenuLabel>
            <DropdownMenuSeparator />
            <DropdownMenuGroup>
              <DropdownMenuItem 
                onClick={() => navigate('/perfil')}
              >
                <User className="mr-2 h-4 w-4" />
                <span>Mi Perfil</span>
              </DropdownMenuItem>
            </DropdownMenuGroup>
            <DropdownMenuSeparator />
            <DropdownMenuItem 
              className="text-red-600"
              onClick={async () => {
                await supabase.auth.signOut()
                navigate('/autenticacion')
              }}
            >
              <LogOut className="mr-2 h-4 w-4" />
              <span>Cerrar Sesión</span>
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </div>
    </div>
  )
}

// src/hooks/useProfile.ts
import { supabase } from "@/integrations/supabase/client"
import { type Profile } from "@/types/profile"
import { useQuery } from "@tanstack/react-query"
import { toast } from "sonner"

export const useProfile = () => {
  return useQuery({
    queryKey: ['profile'],
    queryFn: async () => {
      try {
        const { data: { user }, error: sessionError } = await supabase.auth.getUser()
        
        if (sessionError) {
          console.error('Error getting user:', sessionError)
          toast.error('Error al obtener la sesión')
          throw sessionError
        }

        if (!user) {
          console.log('No user found')
          return null
        }

        const { data, error } = await supabase
          .from('profiles')
          .select('*')
          .eq('id', user.id)
          .maybeSingle()

        if (error) {
          console.error('Error fetching profile:', error)
          toast.error('Error al cargar el perfil')
          throw error
        }

        if (!data) {
          console.log('Creating new profile for user:', user.id)
          const { data: newProfile, error: createError } = await supabase
            .from('profiles')
            .insert([{ id: user.id }])
            .select()
            .single()

          if (createError) {
            console.error('Error creating profile:', createError)
            toast.error('Error al crear el perfil')
            throw createError
          }

          return newProfile as Profile
        }

        return data as Profile
      } catch (error) {
        console.error('Error in useProfile:', error)
        toast.error('Error al cargar el perfil. Por favor, intenta recargar la página.')
        throw error
      }
    },
    retry: 3,
    retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),
    staleTime: 1000 * 60 * 5, // 5 minutos
  })
}

// src/hooks/useIsAdmin.ts
import { useQuery } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";
import { useEffect } from "react";

export const useIsAdmin = () => {
  const { data: profile, refetch } = useQuery({
    queryKey: ['profile'],
    queryFn: async () => {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error('No user found');

      const { data, error } = await supabase
        .from('profiles')
        .select('role')
        .eq('id', user.id)
        .single();

      if (error) throw error;
      return data;
    },
    staleTime: 0, // Esto hace que se revalide cada vez que se llama al hook
    retry: false
  });

  useEffect(() => {
    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {
      if (session) {
        console.log('Auth state changed in useIsAdmin, refetching profile...');
        refetch();
      }
    });

    return () => subscription.unsubscribe();
  }, [refetch]);

  return profile?.role === 'admin';
};
