Veamos los archivos principales involucrados:

El componente principal de optimización de título:
src/components/video-dialog/TitleOptimization.tsx
import { Video } from "@/types/video";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { AlertCircle, Sparkles, FileText, ArrowRight, Smile, Wand2 } from "lucide-react";
import { Card } from "@/components/ui/card";
import { EmojiPicker } from "@/components/emoji/EmojiPicker";
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { cn } from "@/lib/utils";
import { ScrollArea } from "@/components/ui/scroll-area";
import { TitleHistory } from "./TitleHistory";

interface TitleOptimizationProps {
  video: Video;
  optimizedTitle: string;
  setOptimizedTitle: (title: string) => void;
  corrections?: string;
  setCorrections?: (corrections: string) => void;
}

export function TitleOptimization({
  video,
  optimizedTitle,
  setOptimizedTitle,
  corrections,
  setCorrections,
}: TitleOptimizationProps) {
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const maxTitleLength = 100;

  const handleEmojiSelect = (emoji: string) => {
    if (optimizedTitle.length + emoji.length <= maxTitleLength) {
      setOptimizedTitle(optimizedTitle + emoji);
    }
  };

  const shouldShowHistory = video.status !== "in_progress" && video.status !== "pending";

  return (
    <div className="space-y-6" translate="no">
      {video.corrections && video.status === "title_corrections" && (
        <Card className="p-4 border-2 border-red-200 bg-gradient-to-br from-red-50/50 to-transparent dark:from-red-950/10 dark:border-red-900/50">
          <div className="flex items-start gap-3">
            <AlertCircle className="h-5 w-5 text-red-500 mt-0.5 shrink-0 animate-pulse" />
            <div className="space-y-2 flex-1">
              <h3 className="font-medium text-red-700 dark:text-red-400">
                Se han solicitado las siguientes correcciones:
              </h3>
              <p className="text-sm text-red-600 dark:text-red-300 whitespace-pre-wrap">
                {video.corrections}
              </p>
            </div>
          </div>
        </Card>
      )}

      <div className="grid gap-6 md:grid-cols-2">
        <Card className="overflow-hidden border-2 bg-gradient-to-br from-gray-50 to-transparent dark:from-gray-900/50 dark:to-transparent">
          <div className="p-6 space-y-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2 text-gray-700 dark:text-gray-300">
                <FileText className="w-5 h-5" />
                <Label className="text-lg font-medium">Título Original</Label>
              </div>
              <Badge variant="outline" className="bg-gray-100 dark:bg-gray-800/50">
                Original
              </Badge>
            </div>
            <ScrollArea className="h-[120px] rounded-md border">
              <div className="p-4">
                <p className="text-xl font-medium leading-relaxed">{video.title}</p>
              </div>
            </ScrollArea>
            <div className="flex items-center gap-2 text-sm text-muted-foreground bg-gray-50 dark:bg-gray-900/50 p-3 rounded-lg">
              <ArrowRight className="w-4 h-4" />
              <span>Serie: {video.serialNumber}</span>
            </div>
          </div>
        </Card>

        <Card className="overflow-hidden border-2 border-purple-200 dark:border-purple-800/50 bg-gradient-to-br from-purple-50 to-transparent dark:from-purple-900/20 dark:to-transparent">
          <div className="p-6 space-y-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2 text-purple-600 dark:text-purple-400">
                <Wand2 className="w-5 h-5 animate-pulse" />
                <Label className="text-lg font-medium">Título Optimizado</Label>
              </div>
              <div className="text-sm text-purple-500 dark:text-purple-400 font-medium">
                {optimizedTitle.length}/{maxTitleLength}
              </div>
            </div>
            
            <div className="relative">
              <Textarea
                value={optimizedTitle}
                onChange={(e) => {
                  if (e.target.value.length <= maxTitleLength) {
                    setOptimizedTitle(e.target.value);
                  }
                }}
                placeholder="Escribe el título optimizado..."
                className={cn(
                  "min-h-[120px] pr-12 bg-white/50 dark:bg-gray-900/50",
                  "border-purple-200 dark:border-purple-800/50",
                  "focus-visible:ring-purple-500/20",
                  "placeholder:text-purple-400/50",
                  "resize-none"
                )}
              />
              <Button
                type="button"
                variant="ghost"
                size="icon"
                className="absolute right-2 bottom-2 text-purple-400 hover:text-purple-600 dark:hover:text-purple-300"
                onClick={() => setShowEmojiPicker(true)}
              >
                <Smile className="h-5 w-5" />
              </Button>
            </div>
          </div>
        </Card>
      </div>

      <Alert className="bg-gradient-to-r from-purple-50 to-transparent dark:from-purple-950/30 dark:to-transparent border-purple-200 dark:border-purple-800/50">
        <Sparkles className="h-4 w-4 text-purple-500" />
        <AlertDescription className="text-purple-700 dark:text-purple-300">
          Optimiza el título manteniendo la esencia del contenido y mejorando su visibilidad.
          {video.status === "title_corrections" && (
            <p className="mt-1 text-purple-500 dark:text-purple-400 font-medium">
              Por favor, revisa las correcciones solicitadas antes de volver a enviar el título optimizado.
            </p>
          )}
        </AlertDescription>
      </Alert>

      {shouldShowHistory && <TitleHistory videoId={video.id} />}

      <EmojiPicker
        isOpen={showEmojiPicker}
        onClose={() => setShowEmojiPicker(false)}
        onEmojiSelect={handleEmojiSelect}
        maxLength={maxTitleLength}
        currentLength={optimizedTitle.length}
      />
    </div>
  );
}

Las acciones de optimización de título:
src/components/video-dialog/actions/titleActions.ts
import { supabase } from "@/integrations/supabase/client";
import { Video } from "@/types/video";
import { VideoStatus } from "@/types/videoStatus";
import { toast } from "sonner";

export const handleTitleOptimization = async (
  currentVideo: Video,
  optimizedTitle: string,
  onVideoUpdate: (updatedVideo: Video) => Promise<void>
) => {
  try {
    const { data, error } = await supabase
      .from('videos')
      .update({
        optimized_title: optimizedTitle,
        status: 'optimize_review' as VideoStatus,
        last_updated: new Date().toISOString()
      })
      .eq('id', currentVideo.id)
      .select()
      .single();

    if (error) throw error;

    if (data) {
      const updatedVideo: Video = {
        ...currentVideo,
        optimizedTitle,
        status: 'optimize_review'
      };

      await onVideoUpdate(updatedVideo);
      toast.success("Título optimizado correctamente");
      return true;
    }
  } catch (error) {
    console.error('Error optimizing title:', error);
    toast.error("Error al optimizar el título");
    return false;
  }
};

export const handleTitleRejection = async (
  currentVideo: Video,
  corrections: string,
  onVideoUpdate: (updatedVideo: Video) => Promise<void>
) => {
  try {
    console.log('Rechazando título con correcciones:', corrections);
    
    const { data, error } = await supabase
      .from('videos')
      .update({
        status: 'title_corrections' as VideoStatus,
        corrections,
        last_updated: new Date().toISOString()
      })
      .eq('id', currentVideo.id)
      .select()
      .single();

    if (error) throw error;

    if (data) {
      const updatedVideo: Video = {
        ...currentVideo,
        status: 'title_corrections',
        corrections
      };

      await onVideoUpdate(updatedVideo);
      toast.success("Correcciones enviadas correctamente");
      return true;
    }
  } catch (error) {
    console.error('Error rejecting title:', error);
    toast.error("Error al enviar las correcciones");
    return false;
  }
};

export const handleTitleApproval = async (
  currentVideo: Video,
  onVideoUpdate: (updatedVideo: Video) => Promise<void>
) => {
  try {
    const { data, error } = await supabase
      .from('videos')
      .update({
        status: 'youtube_ready' as VideoStatus,
        last_updated: new Date().toISOString()
      })
      .eq('id', currentVideo.id)
      .select()
      .single();

    if (error) throw error;

    if (data) {
      const updatedVideo: Video = {
        ...currentVideo,
        status: 'youtube_ready'
      };

      await onVideoUpdate(updatedVideo);
      toast.success("Título aprobado correctamente");
      return true;
    }
  } catch (error) {
    console.error('Error approving title:', error);
    toast.error("Error al aprobar el título");
    return false;
  }
};