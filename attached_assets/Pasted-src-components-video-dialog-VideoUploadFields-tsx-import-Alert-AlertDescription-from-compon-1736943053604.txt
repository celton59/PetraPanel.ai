src/components/video-dialog/VideoUploadFields.tsx
import { Alert, AlertDescription } from "@/components/ui/alert";
import { AlertCircle } from "lucide-react";
import { Label } from "@/components/ui/label";
import { FileUploadZone } from "./FileUploadZone";

interface VideoUploadFieldsProps {
  videoFile: File | null;
  thumbnailFile: File | null;
  isDraggingVideo: boolean;
  isDraggingThumbnail: boolean;
  onDragOver: (e: React.DragEvent, setIsDragging: (value: boolean) => void) => void;
  onDragLeave: (e: React.DragEvent, setIsDragging: (value: boolean) => void) => void;
  onDrop: (e: React.DragEvent, setIsDragging: (value: boolean) => void, setFile: (file: File | null) => void, fileType: string) => void;
  setIsDraggingVideo: (value: boolean) => void;
  setIsDraggingThumbnail: (value: boolean) => void;
  setVideoFile: (file: File | null) => void;
  setThumbnailFile: (file: File | null) => void;
  isUploading?: boolean;
  uploadProgress?: number;
}

export function VideoUploadFields({
  videoFile,
  thumbnailFile,
  isDraggingVideo,
  isDraggingThumbnail,
  onDragOver,
  onDragLeave,
  onDrop,
  setIsDraggingVideo,
  setIsDraggingThumbnail,
  setVideoFile,
  setThumbnailFile,
  isUploading,
  uploadProgress
}: VideoUploadFieldsProps) {
  return (
    <div className="space-y-4">
      <div>
        <Label className="mb-2 block">Video</Label>
        <FileUploadZone
          file={videoFile}
          isDragging={isDraggingVideo}
          onDragOver={(e) => onDragOver(e, setIsDraggingVideo)}
          onDragLeave={(e) => onDragLeave(e, setIsDraggingVideo)}
          onDrop={(e) => onDrop(e, setIsDraggingVideo, setVideoFile, 'video')}
          onFileChange={setVideoFile}
          accept="video/*"
          type="video"
          isUploading={isUploading}
          uploadProgress={uploadProgress}
        />
        {!videoFile && (
          <Alert variant="default" className="mt-2">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>
              Formatos soportados: MP4, MOV, AVI. Tamaño máximo: 1GB
            </AlertDescription>
          </Alert>
        )}
      </div>

      <div>
        <Label className="mb-2 block">Miniatura</Label>
        <FileUploadZone
          file={thumbnailFile}
          isDragging={isDraggingThumbnail}
          onDragOver={(e) => onDragOver(e, setIsDraggingThumbnail)}
          onDragLeave={(e) => onDragLeave(e, setIsDraggingThumbnail)}
          onDrop={(e) => onDrop(e, setIsDraggingThumbnail, setThumbnailFile, 'image')}
          onFileChange={setThumbnailFile}
          accept="image/*"
          type="image"
          isUploading={isUploading}
          uploadProgress={uploadProgress}
        />
        {!thumbnailFile && (
          <Alert variant="default" className="mt-2">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>
              Formatos soportados: JPG, PNG. Resolución recomendada: 1280x720
            </AlertDescription>
          </Alert>
        )}
      </div>
    </div>
  );
}