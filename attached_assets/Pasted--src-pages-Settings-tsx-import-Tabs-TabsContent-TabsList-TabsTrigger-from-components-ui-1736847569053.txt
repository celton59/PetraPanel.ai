// src/pages/Settings.tsx
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { ScrollArea } from "@/components/ui/scroll-area";
import { ProjectsTab } from "@/components/settings/ProjectsTab";
import { UsersTab } from "@/components/settings/UsersTab";
import { RolesTab } from "@/components/settings/RolesTab";
import { VideoFlowTab } from "@/components/settings/VideoFlowTab";
import { useIsMobile } from "@/hooks/use-mobile";
import { Building2, Users2, Shield, GitBranch } from "lucide-react";
import { Card } from "@/components/ui/card";

const Settings = () => {
  const isMobile = useIsMobile();

  return (
    <div className="container mx-auto px-4 space-y-6">
      <div className="space-y-1">
        <h1 className="text-2xl font-bold tracking-tight">Configuración</h1>
        <p className="text-sm text-muted-foreground">
          Gestiona la configuración general de la plataforma
        </p>
      </div>

      <Tabs defaultValue="projects" className="space-y-4 md:space-y-0 md:flex md:gap-8">
        <div className="relative w-full md:w-auto">
          <Card className="sticky top-4 w-full md:w-auto p-3 bg-card/50 backdrop-blur supports-[backdrop-filter]:bg-background/60">
            <ScrollArea className={`w-full ${isMobile ? 'overflow-x-auto' : ''}`}>
              <TabsList 
                className="h-full w-auto flex flex-col space-y-1 bg-transparent min-w-[200px]"
              >
                <TabsTrigger 
                  value="projects" 
                  className="w-full justify-start px-3 py-2 gap-2.5 data-[state=active]:bg-primary/10 hover:bg-muted/80 transition-colors rounded-md"
                >
                  <Building2 className="w-4 h-4 text-muted-foreground" />
                  <span className="font-medium">Proyectos</span>
                </TabsTrigger>
                <TabsTrigger 
                  value="users" 
                  className="w-full justify-start px-3 py-2 gap-2.5 data-[state=active]:bg-primary/10 hover:bg-muted/80 transition-colors rounded-md"
                >
                  <Users2 className="w-4 h-4 text-muted-foreground" />
                  <span className="font-medium">Usuarios</span>
                </TabsTrigger>
                <TabsTrigger 
                  value="roles" 
                  className="w-full justify-start px-3 py-2 gap-2.5 data-[state=active]:bg-primary/10 hover:bg-muted/80 transition-colors rounded-md"
                >
                  <Shield className="w-4 h-4 text-muted-foreground" />
                  <span className="font-medium">Roles</span>
                </TabsTrigger>
                <TabsTrigger 
                  value="workflow" 
                  className="w-full justify-start px-3 py-2 gap-2.5 data-[state=active]:bg-primary/10 hover:bg-muted/80 transition-colors rounded-md"
                >
                  <GitBranch className="w-4 h-4 text-muted-foreground" />
                  <span className="font-medium">Flujo de trabajo</span>
                </TabsTrigger>
              </TabsList>
            </ScrollArea>
          </Card>
        </div>

        <div className="flex-1">
          <TabsContent value="projects" className="space-y-4 mt-2 md:mt-0">
            <ProjectsTab />
          </TabsContent>

          <TabsContent value="users" className="space-y-4 mt-2 md:mt-0">
            <UsersTab />
          </TabsContent>

          <TabsContent value="roles" className="space-y-4 mt-2 md:mt-0">
            <RolesTab />
          </TabsContent>

          <TabsContent value="workflow" className="space-y-4 mt-2 md:mt-0">
            <VideoFlowTab />
          </TabsContent>
        </div>
      </Tabs>
    </div>
  );
};

export default Settings;

// src/components/settings/ProjectsTab.tsx
import { useState } from "react";
import { Pencil, Trash2, Loader2 } from "lucide-react";
import { Button } from "@/components/ui/button";
import { useProjectStore } from "@/stores/projectStore";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { ProjectForm } from "./projects/ProjectForm";
import { ProjectEditDialog } from "./projects/ProjectEditDialog";
import { useProjects } from "@/hooks/useProjects";
import { toast } from "sonner";

export const ProjectsTab = () => {
  const { createProject, updateProject, deleteProject } = useProjectStore();
  const { data: projects = [], isLoading } = useProjects();
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleAddProject = async (projectData) => {
    setIsSubmitting(true);
    try {
      await createProject(projectData);
      toast.success("Proyecto creado correctamente");
    } catch (error) {
      console.error('Error creating project:', error);
      toast.error("Error al crear el proyecto");
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleUpdateProject = async (projectData) => {
    setIsSubmitting(true);
    try {
      await updateProject(projectData.id, projectData);
      toast.success("Proyecto actualizado correctamente");
    } catch (error) {
      console.error('Error updating project:', error);
      toast.error("Error al actualizar el proyecto");
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleDeleteProject = async (id: number) => {
    if (!confirm("¿Estás seguro de que deseas eliminar este proyecto?")) return;
    try {
      await deleteProject(id);
      toast.success("Proyecto eliminado correctamente");
    } catch (error) {
      console.error('Error deleting project:', error);
      toast.error("Error al eliminar el proyecto");
    }
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center p-8">
        <Loader2 className="h-8 w-8 animate-spin" />
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <ProjectForm 
        isSubmitting={isSubmitting}
        onAddProject={handleAddProject}
      />

      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>Nombre</TableHead>
            <TableHead>Prefijo</TableHead>
            <TableHead>Último número</TableHead>
            <TableHead className="w-[100px]">Acciones</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {projects.map((project) => (
            <TableRow key={project.id}>
              <TableCell>{project.name}</TableCell>
              <TableCell>{project.prefix}</TableCell>
              <TableCell>{String(project.current_number).padStart(4, "0")}</TableCell>
              <TableCell>
                <div className="flex items-center gap-1">
                  <ProjectEditDialog
                    project={project}
                    isSubmitting={isSubmitting}
                    onUpdateProject={handleUpdateProject}
                  />
                  <Button 
                    variant="ghost" 
                    size="icon"
                    onClick={() => handleDeleteProject(project.id)}
                  >
                    <Trash2 className="w-4 h-4" />
                  </Button>
                </div>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </div>
  );
};

// src/components/settings/RolesTab.tsx
import { UserRole } from "@/types/user";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Info } from "lucide-react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";

const roleDescriptions: Record<UserRole, string> = {
  admin: "Control total del sistema",
  reviewer: "Revisa y aprueba videos",
  optimizer: "Optimiza títulos y metadatos",
  youtuber: "Gestiona el canal de YouTube",
  uploader: "Sube y organiza videos",
};

const rolePermissions: Record<UserRole, string[]> = {
  admin: [
    "Gestionar usuarios y roles",
    "Gestionar proyectos",
    "Acceso completo a todas las funciones",
  ],
  reviewer: [
    "Ver videos pendientes de revisión",
    "Aprobar o rechazar videos",
    "Añadir comentarios de revisión",
  ],
  optimizer: [
    "Editar títulos y descripciones",
    "Optimizar metadatos",
    "Ver estadísticas de SEO",
  ],
  youtuber: [
    "Publicar videos en YouTube",
    "Gestionar playlists",
    "Ver analytics de YouTube",
  ],
  uploader: [
    "Subir nuevos videos",
    "Organizar videos por proyecto",
    "Asignar videos a revisores",
  ],
};

export const RolesTab = () => {
  const roles: UserRole[] = ["admin", "reviewer", "optimizer", "youtuber", "uploader"];

  return (
    <div className="space-y-6">
      <div className="flex items-start gap-2">
        <Info className="w-4 h-4 mt-1 text-muted-foreground" />
        <p className="text-sm text-muted-foreground">
          Los roles determinan qué acciones puede realizar cada usuario en el sistema.
          Cada rol tiene permisos específicos que no pueden ser modificados.
        </p>
      </div>

      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>Rol</TableHead>
            <TableHead>Descripción</TableHead>
            <TableHead>Permisos</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {roles.map((role) => (
            <TableRow key={role}>
              <TableCell>
                <Badge variant="outline" className="capitalize">
                  {role}
                </Badge>
              </TableCell>
              <TableCell>{roleDescriptions[role]}</TableCell>
              <TableCell>
                <Dialog>
                  <DialogTrigger asChild>
                    <button className="text-sm text-primary hover:underline cursor-pointer">
                      Ver permisos
                    </button>
                  </DialogTrigger>
                  <DialogContent className="sm:max-w-md">
                    <DialogHeader>
                      <DialogTitle className="flex items-center gap-2">
                        <Badge variant="outline" className="capitalize">
                          {role}
                        </Badge>
                        <span>- Permisos del rol</span>
                      </DialogTitle>
                    </DialogHeader>
                    <div className="mt-4">
                      <ul className="list-disc list-inside space-y-2">
                        {rolePermissions[role].map((permission, index) => (
                          <li key={index} className="text-sm text-muted-foreground">
                            {permission}
                          </li>
                        ))}
                      </ul>
                    </div>
                  </DialogContent>
                </Dialog>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </div>
  );
};

// src/components/settings/VideoFlowTab.tsx
import { Card } from "@/components/ui/card";
import { VideoFlowDiagram } from "@/components/video/VideoFlowDiagram";
import { 
  PenLine, 
  Upload, 
  CheckCircle2, 
  Youtube,
  FileVideo,
  FileText
} from "lucide-react";

export function VideoFlowTab() {
  const flowSteps = [
    {
      icon: FileVideo,
      title: "Creación",
      description: "Se crea un nuevo video o artículo en el sistema",
      status: "pending",
      color: "bg-yellow-500/10 text-yellow-500 border-yellow-500/20"
    },
    {
      icon: PenLine,
      title: "Optimización",
      description: "Se optimiza el título para mejorar el SEO",
      status: "in_progress",
      color: "bg-blue-500/10 text-blue-500 border-blue-500/20"
    },
    {
      icon: CheckCircle2,
      title: "Revisión de Optimización",
      description: "El equipo revisa las optimizaciones y puede aprobar o solicitar correcciones",
      status: "optimize_review",
      color: "bg-pink-500/10 text-pink-500 border-pink-500/20"
    },
    {
      icon: Upload,
      title: "Revisión de Archivos",
      description: "Se revisan el video y la miniatura antes de la subida a YouTube. En esta etapa se suben y verifican los archivos necesarios.",
      status: "upload_review",
      color: "bg-indigo-500/10 text-indigo-500 border-indigo-500/20"
    },
    {
      icon: Youtube,
      title: "Listo para YouTube",
      description: "Se prepara el contenido para subir a YouTube",
      status: "youtube_ready",
      color: "bg-green-500/10 text-green-500 border-green-500/20"
    },
    {
      icon: CheckCircle2,
      title: "Revisión Final",
      description: "Revisión final antes de la publicación",
      status: "review",
      color: "bg-purple-500/10 text-purple-500 border-purple-500/20"
    }
  ];

  return (
    <div className="space-y-8">
      <div>
        <h3 className="text-lg font-medium">Flujo de Trabajo</h3>
        <p className="text-sm text-muted-foreground">
          Entendiendo el proceso de publicación de contenido
        </p>
      </div>

      <VideoFlowDiagram />

      <div className="relative">
        <div className="absolute top-0 left-12 h-full w-0.5 bg-border" />
        <div className="space-y-8">
          {flowSteps.map((step, index) => (
            <div key={step.status} className="relative">
              <div className="flex items-start gap-6">
                <div className={`relative z-10 flex h-10 w-10 items-center justify-center rounded-full border ${step.color}`}>
                  <step.icon className="w-5 h-5" />
                </div>
                <Card className="flex-1 p-4 transition-colors hover:bg-muted/50">
                  <div className="flex flex-col gap-2">
                    <div className="flex items-center justify-between">
                      <h4 className="font-medium">{step.title}</h4>
                      <span className="text-xs px-2 py-0.5 rounded-full bg-muted">
                        {step.status}
                      </span>
                    </div>
                    <p className="text-sm text-muted-foreground">
                      {step.description}
                    </p>
                  </div>
                </Card>
              </div>
              {index < flowSteps.length - 1 && (
                <div className="absolute left-[19px] top-10 h-8 w-0.5 bg-border" />
              )}
            </div>
          ))}
        </div>
      </div>

      <Card className="p-4 border-orange-500/20 bg-orange-500/5">
        <div className="flex items-start gap-4">
          <div className="flex h-10 w-10 items-center justify-center rounded-full border border-orange-500/20 bg-orange-500/10 text-orange-500">
            <FileText className="w-5 h-5" />
          </div>
          <div className="space-y-1">
            <h4 className="font-medium">Nota sobre Artículos</h4>
            <p className="text-sm text-muted-foreground">
              Los artículos siguen un flujo similar pero sin necesidad de subir archivos de video o miniaturas.
              El proceso se centra en la optimización del contenido y las revisiones del equipo.
            </p>
          </div>
        </div>
      </Card>
    </div>
  );
}
