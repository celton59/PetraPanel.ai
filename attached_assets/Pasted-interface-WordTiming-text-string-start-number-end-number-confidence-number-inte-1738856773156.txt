interface WordTiming {
  text: string;
  start: number;
  end: number;
  confidence: number;
}

interface SentenceTiming {
  text: string;
  words: WordTiming[];
  start: number;
  end: number;
}

export const analyzeAudioTiming = async (audioUrl: string): Promise<SentenceTiming[]> => {
  const apiKey = localStorage.getItem('ASSEMBLY_AI_API_KEY');
  
  if (!apiKey) {
    throw new Error('AssemblyAI API key not found. Please set your API key in the settings.');
  }

  try {
    // First validate the API key with a simple request
    const validateResponse = await fetch('https://api.assemblyai.com/v2/transcript', {
      method: 'GET',
      headers: {
        'authorization': apiKey
      }
    });

    if (!validateResponse.ok) {
      if (validateResponse.status === 401) {
        throw new Error('Invalid AssemblyAI API key. Please check your API key in the settings.');
      }
      throw new Error('Error validating AssemblyAI API key');
    }

    // Proceed with audio upload
    console.log('Uploading audio to AssemblyAI...');
    const uploadResponse = await fetch('https://api.assemblyai.com/v2/upload', {
      method: 'POST',
      headers: {
        'authorization': apiKey
      },
      body: await fetch(audioUrl).then(r => r.blob())
    });

    if (!uploadResponse.ok) {
      throw new Error('Error uploading audio to AssemblyAI');
    }

    const { upload_url } = await uploadResponse.json();
    console.log('Audio uploaded successfully:', upload_url);

    // Start transcription with detailed analysis
    const transcriptResponse = await fetch('https://api.assemblyai.com/v2/transcript', {
      method: 'POST',
      headers: {
        'authorization': apiKey,
        'content-type': 'application/json',
      },
      body: JSON.stringify({
        audio_url: upload_url,
        word_boost: ["..."],
        punctuate: true,
        format_text: true,
        word_timestamps: true,
        utterance_timestamps: true
      })
    });

    if (!transcriptResponse.ok) {
      throw new Error('Error initiating transcription');
    }

    const { id } = await transcriptResponse.json();
    console.log('Transcription started with ID:', id);

    // Polling for result
    let result;
    while (true) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const pollingResponse = await fetch(`https://api.assemblyai.com/v2/transcript/${id}`, {
        headers: {
          'authorization': apiKey
        }
      });
      
      if (!pollingResponse.ok) {
        throw new Error('Error checking transcription status');
      }
      
      result = await pollingResponse.json();
      console.log('Polling status:', result.status);
      
      if (result.status === 'completed') {
        break;
      } else if (result.status === 'error') {
        throw new Error('Transcription failed');
      }
    }

    return result.utterances.map((utterance: any) => ({
      text: utterance.text,
      words: utterance.words,
      start: utterance.start,
      end: utterance.end
    }));
  } catch (error) {
    console.error('Error in analyzeAudioTiming:', error);
    throw error;
  }
};