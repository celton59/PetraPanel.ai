// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum VideoStatus {
  pending
  in_progress
  title_corrections
  optimize_review
  upload_review
  youtube_ready
  review
  media_corrections
  completed
}

model Video {
  id                  Int       @id @default(autoincrement())
  projectId          Int       @map("project_id")
  title              String
  description        String?
  status             VideoStatus @default(pending)
  videoUrl          String?    @map("video_url")
  thumbnailUrl      String?    @map("thumbnail_url")
  youtubeUrl        String?    @map("youtube_url")
  optimizedTitle    String?    @map("optimized_title")
  optimizedDescription String? @map("optimized_description")
  optimizedById     Int?      @map("optimized_by_id")
  tags              String?
  seriesNumber      String?    @map("series_number")
  currentReviewerId Int?      @map("current_reviewer_id")
  lastReviewedAt    DateTime?  @map("last_reviewed_at")
  lastReviewComments String?   @map("last_review_comments")
  createdById       Int       @map("created_by_id")
  createdAt         DateTime   @default(now()) @map("created_at")
  updatedAt         DateTime   @default(now()) @map("updated_at")
  publishedAt       DateTime?  @map("published_at")
  titleCorrected    Boolean    @default(false) @map("title_corrected")
  mediaCorrected    Boolean    @default(false) @map("media_corrected")
  
  projects          VideosOnProjects[]
  optimizedBy       User?      @relation("optimizedVideos", fields: [optimizedById], references: [id])
  createdBy         User       @relation("createdVideos", fields: [createdById], references: [id])
  currentReviewer   User?      @relation("reviewingVideos", fields: [currentReviewerId], references: [id])
}

model User {
  id             Int      @id @default(autoincrement())
  username       String   @unique
  password       String
  fullName       String?  @map("full_name")
  email          String?
  bio            String?
  phone          String?
  role           UserRole     @default(uploader)
  avatarUrl      String?  @map("avatar_url")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @map("updated_at")
  
  optimizedVideos Video[] @relation("optimizedVideos")
  createdVideos   Video[] @relation("createdVideos")
  reviewingVideos Video[] @relation("reviewingVideos")
  projects        Project[]
}

enum UserRole {
  uploader
  admin
  reviewer
  optimizer
  youtuber
}

model Project {
  id            Int       @id @default(autoincrement())
  name          String
  prefix        String?
  currentNumber Int       @default(0) @map("current_number")
  description   String?
  createdById   Int       @map("created_by_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  
  createdBy     User      @relation(fields: [createdById], references: [id])
  videos        VideosOnProjects[]
}

model VideosOnProjects {
  projectId Int
  videoId   Int
  project   Project @relation(fields: [projectId], references: [id])
  video     Video   @relation(fields: [videoId], references: [id])

  @@id([projectId, videoId])
  @@map("videos_on_projects")
}
